¿Qué es un test?
Como developers tenemos que garantizar que el codigo escrito cumpla con ciertos requisitos/expectativas. Esto lo hacemos por medio de una prueba (test).

Esto nos asegura:

Nuestro codigo cumple con el standar.
Enviamos a producción sin errores.
Tipos de pruebas
Debemos tener en cuenta que existen dos tipos de pruebas:

-Funcionales.
    #Pruebas Unitarias.- Se prueban pequeñas partes de nuestro codigo asegurandonos así que cumplen con lo que se desea. (En desarrollo web las pruebas se traducen a probar cada sección de la pagina y todas las interacciones en ellas).
-No funcionales.

Jest
Jest es un framework de JavaScript para pruebas.


----
Instalamos jest como devDependencies
La carpeta __test__ es un estandar (best practice) para poner alli las pruebas. | NAME.test.js

// La funcion test recibe dos parametros: Un string que describe lo que va a pasar. Función anonima que viene lo que se va a probar
// La función expect: valor de entrada, sobre que lo voy a comparar usando .toMach()

modificar el package.json el script por jest y correrlo con npm test o npm run test

----
Para correr pruebas directamente sobre un archivo y no sobre todos:
- npm run test src/__test__/index.test.js 
- jest RUTA | pero tenemos que instalar jest global | sudo npm i -g jest 

describe() - describe una estructura una serie de pruebas dentro de un bloque una suite

----Watch y Coverage ----
Script para automatizar la ejecucion de las pruebas y cada vez que hacemos un cambio vuelve a ejecutar las pruebas
"test:watch": "jest --watch"

Coverage: Jest nos genera un reporte del alcanze de nuestras apps nos permite saber que tanto estamos probando nuestras apps y en el index.html podemos ver todo graficamente
jest --coverage


---- PREPARAR PROYECTO ----
https://github.com/gndx/platzi-store.git REPO
npm i jest enzyme enzyme-adapter-react-16 -D

Enzyme es una utilidad de prueba de JavaScript para React que hace que sea más fácil probar la salida de sus componentes React. También puede manipular, atravesar y, de alguna manera, simular el tiempo de ejecución dada la salida.

Añadimos los scripts 
"test": "jest",
"test:watch": "jest --watch"

creamos la carpeta __test__ donde viviran todas las pruebas de nuestro proyecto
Tenemos que crear un adapter para tener la configuracion de este proyecto setupTest.js:
    import { configure } from 'enzyme'
    import Adapter from "enzyme-adapter-react-16"

    configure({ adapter: new Adapter() })

En el package.json creamos la configuracion necesaria para trabajar con este proyecto a lo ultimo del package para que este mas ordenado y ya podemos hacer pruebas:)
"jest": {
    "setupFilesAfterEnv": [
      "<rootDir>/src/__test__/setupTest.js"
    ]
  }

import { mount } from "enzyme" //nos permite montar el componente en el dom y trabajar con cada uno de sus items
import React from "react"
import Footer from "../../components/Footer";

// describe mi suite para este componente
describe('<Footer />', () => {
    test('Render del componente Footer', () => {
        const footer = mount(<Footer />)
        expect(footer.length).toEqual(1)
    })
})