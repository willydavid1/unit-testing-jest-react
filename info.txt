¿Qué es un test?
Como developers tenemos que garantizar que el codigo escrito cumpla con ciertos requisitos/expectativas. Esto lo hacemos por medio de una prueba (test).

Esto nos asegura:

Nuestro codigo cumple con el standar.
Enviamos a producción sin errores.
Tipos de pruebas
Debemos tener en cuenta que existen dos tipos de pruebas:

-Funcionales.
    #Pruebas Unitarias.- Se prueban pequeñas partes de nuestro codigo asegurandonos así que cumplen con lo que se desea. (En desarrollo web las pruebas se traducen a probar cada sección de la pagina y todas las interacciones en ellas).
-No funcionales.

Jest
Jest es un framework de JavaScript para pruebas.


----
Instalamos jest como devDependencies
La carpeta __test__ es un estandar (best practice) para poner alli las pruebas. | NAME.test.js

// La funcion test recibe dos parametros: Un string que describe lo que va a pasar. Función anonima que viene lo que se va a probar
// La función expect: valor de entrada, sobre que lo voy a comparar usando .toMach()

modificar el package.json el script por jest y correrlo con npm test o npm run test

----
Para correr pruebas directamente sobre un archivo y no sobre todos:
- npm run test src/__test__/index.test.js 
- jest RUTA | pero tenemos que instalar jest global | sudo npm i -g jest 

describe() - describe una estructura una serie de pruebas dentro de un bloque una suite

----Watch y Coverage ----
Script para automatizar la ejecucion de las pruebas y cada vez que hacemos un cambio vuelve a ejecutar las pruebas
"test:watch": "jest --watch"

Coverage: Jest nos genera un reporte del alcanze de nuestras apps nos permite saber que tanto estamos probando nuestras apps y en el index.html podemos ver todo graficamente
jest --coverage


---- PREPARAR PROYECTO ----
https://github.com/gndx/platzi-store.git REPO
npm i jest enzyme enzyme-adapter-react-16 -D

Enzyme es una utilidad de prueba de JavaScript para React que hace que sea más fácil probar la salida de sus componentes React. También puede manipular, atravesar y, de alguna manera, simular el tiempo de ejecución dada la salida.

Añadimos los scripts 
"test": "jest",
"test:watch": "jest --watch"

creamos la carpeta __test__ donde viviran todas las pruebas de nuestro proyecto
Tenemos que crear un adapter para tener la configuracion de este proyecto setupTest.js:
    import { configure } from 'enzyme'
    import Adapter from "enzyme-adapter-react-16"

    configure({ adapter: new Adapter() })

En el package.json creamos la configuracion necesaria para trabajar con este proyecto a lo ultimo del package para que este mas ordenado y ya podemos hacer pruebas:)
"jest": {
    "setupFilesAfterEnv": [
      "<rootDir>/src/__test__/setupTest.js"
    ]
  }

import { mount } from "enzyme" //nos permite montar el componente en el dom y trabajar con cada uno de sus items
import React from "react"
import Footer from "../../components/Footer";

// describe mi suite para este componente
describe('<Footer />', () => {
    test('Render del componente Footer', () => {
        const footer = mount(<Footer />)
        expect(footer.length).toEqual(1)
    })
})



------ MOCKS ------
Los mocks son funciones que simulan acciones que deberia hacer nuestra app, es buena practica almacenarlos en su propia carpeta standar __mocks__ y dentro el styleMock.js 

en el package.json especifico que los archivos con extension (styl|css) tome el MOCK del archivo styleMock.js
"jest": {
    "setupFilesAfterEnv": [
      "<rootDir>/src/__test__/setupTest.js"
    ],
    "ModuleNameMapper": {
      "\\.(styl|css)$": "<rootDir>/src/__mocks__/styleMock.js"
    }
  }


------ Implementar provider mock ------
¿Cuándo utilizar mount y cuándo utilizar shallow?
mount --> Cuando necesitas el DOM
shallow --> Solo necesitas algo particular del componente. shallow es una función de Enzyme que se utiliza para probar componentes de forma aislada, ya que no renderiza los subcomponentes.

Las pruebas se realizan en el Header.test.js utilizando el <ProviderMock>:
test('Render del componente Header', () => {
    const header = shallow(
      <ProviderMock>
        <Header />
      </ProviderMock>
    );
    expect(header.length).toEqual(1); // se monta el componente?
  });

Simulamos la accion de hacer click a un boton que maneja un evento onclick (comprobamos que se llame la funcion):
test('Comprobar el boton de comprar', () => {
    const handleAddToCart = jest.fn();// llamamos a jest.fn() para no llamar la funcion original del proyecto cuando se hace click en el boton (es una funcion de jest que no hace nada)
    const wrapper = mount(
      <ProviderMock>
        <Product
          product={ProductMock}
          handleAddToCart={handleAddToCart}
        />
      </ProviderMock>,
    );
    wrapper.find('button').simulate('click'); // del componente Product busca el boton y simula un click
    expect(handleAddToCart).toHaveBeenCalledTimes(1); // comprobamos si se llama la funcion 1 vez
  });





---- Snapshot | react-test-renderer ----
Los ** tests de Snapshot** son de gran utilidad cuando se quiere asegurar que la UI no cambia inesperadamente.
Para usar snapshot debemos covertir un componente a un Object Json. | esto nos permite darle seguimiento a componentes o estructuras de datos.
  npm i react-test-renderer -D

// Si no existe el snapshot lo crea y despues lo comprueba | cuando volvemos a correr las pruebas y si ya existe este snapshot lo que hace es compararlos
import { create } from 'react-test-renderer'; // create: Crea una instancia, con el elemento React pasado como argumento luego podemos usar metodos como .toJSON() que Devuelve un objeto que representa el árbol renderizado en formato JSON.
describe('Footer Snapshot', () => {
  test('Comprobar la UI del componente Footer', () => {
    const footer = create(<Footer />);
    expect(footer.toJSON()).toMatchSnapshot();
  });
});

=> ahora si cambiamos el componente <Footer /> da error porque el snapshot no es igual | dato adicional se crea una carpeta llamada __snapshot__ y alli estan los snapshot de los compoentes

describe('Header SnapShot con un Mock', () => {
  test('Comprobar el SnapShot de Header con Mock', () => {
    const header = create(
      <ProviderMock>
        <Header />
      </ProviderMock>,
    );
    expect(header.toJSON()).toMatchSnapshot();
  });
});

PARA RESTRUCTURAR UN SNAPSHOT (imaginemos que el componente header necesita un cambio de clase y tenemos que refactorizar el snapshot):
$comando => jest --updateSnapshot
Es una práctica común agregar script de NPM => “test:update”: “jest --updateSnapshot”,




---- Probar Actions Creators ----

import actions from '../../actions';
import ProductMock from '../../__mocks__/ProductMock';

describe('Actions Creators', () => {
  test('addToCard Action', () => {
    const payload = ProductMock;
    const expected = {
      type: 'ADD_TO_CART',
      payload,
    };
    expect(actions.addToCart(payload)).toEqual(expected); // testeamos el action con el objeto
  });
});

PARA QUE SE VEAN LOS TEST QUE ESTAMOS CORRIENDO HAY QUE CONFIGURAR JEST PARA QUE SEA VERBOSO
  "jest": {
    "verbose": true
  }
